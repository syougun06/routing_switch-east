#!/usr/bin/env ruby
$LOAD_PATH.unshift File.join(__dir__, '..', 'lib')

require 'rubygems'
require 'bundler'
Bundler.setup :default

require 'gli'
require 'trema'
require 'sliceable_switch'

# slice command
module SliceApp
  extend GLI::App

  desc 'Creates a new virtual slice'
  arg_name 'name'
  command :add do |c|
    c.desc 'Location to find socket files'
    c.flag [:S, :socket_dir], default_value: Trema::DEFAULT_SOCKET_DIR

    c.action do |_global_options, options, args|
      fail 'slice name is required.' if args.empty?
      Trema.controller_process(options[:socket_dir]).
        sliceable_switch.
        add_slice(args.first)
    end
  end

  desc 'Deletes a virtual slice'
  arg_name 'name'
  command :delete do |c|
    c.desc 'Location to find socket files'
    c.flag [:S, :socket_dir], default_value: Trema::DEFAULT_SOCKET_DIR

    c.action do |_global_options, options, args|
      fail 'slice name is required.' if args.empty?
      Trema.controller_process(options[:socket_dir]).
        sliceable_switch.
        delete_slice(args.first)
    end
  end

  desc 'Lists slices'
  command :list do |c|
    c.desc 'Location to find socket files'
    c.flag [:S, :socket_dir], default_value: Trema::DEFAULT_SOCKET_DIR

    c.action do |_global_options, options, _args|
      DRb.start_service
      slices = Trema.controller_process(options[:socket_dir]).
               sliceable_switch.
               slices
      slices.each_pair do |slice, ports|
        puts slice
        ports.each do |port, mac_addresses|
          puts "  #{port.name}"
          mac_addresses.each do |each|
            puts "    #{each}"
          end
        end
      end
    end
  end

  desc 'Adds a port to a slice'
  command :add_port do |c|
    c.desc 'Switch port'
    c.flag [:p, :port]
    c.desc 'Slice name'
    c.flag [:s, :slice]
    c.desc 'Location to find socket files'
    c.flag [:S, :socket_dir], default_value: Trema::DEFAULT_SOCKET_DIR

    c.action do |_global_options, options, _args|
      DRb.start_service
      fail '--port option is mandatory.' unless options[:port]
      fail '--slice option is mandatory.' unless options[:slice]
      port = Slice::Port.parse(options[:port])
      Trema.
        controller_process(options[:socket_dir]).
        sliceable_switch.
        add_port_to_slice(options[:slice],
                          dpid: port[:dpid], port_no: port[:port_no])
    end
  end

  desc 'Deletes a port from a slice'
  command :delete_port do |c|
    c.desc 'Switch port'
    c.flag [:p, :port]
    c.desc 'Slice name'
    c.flag [:s, :slice]
    c.desc 'Location to find socket files'
    c.flag [:S, :socket_dir], default_value: Trema::DEFAULT_SOCKET_DIR

    c.action do |_global_options, options, _args|
      DRb.start_service
      fail '--port option is mandatory.' unless options[:port]
      fail '--slice option is mandatory.' unless options[:slice]
      port = Slice::Port.parse(options[:port])
      Trema.
        controller_process(options[:socket_dir]).
        sliceable_switch.
        delete_port_from_slice(options[:slice],
                               dpid: port[:dpid], port_no: port[:port_no])
    end
  end

  desc 'Adds a host to a slice'
  command :add_host do |c|
    c.desc 'MAC address'
    c.flag [:m, :mac]
    c.desc 'Switch port'
    c.flag [:p, :port]
    c.desc 'Slice name'
    c.flag [:s, :slice]
    c.desc 'Location to find socket files'
    c.flag [:S, :socket_dir], default_value: Trema::DEFAULT_SOCKET_DIR

    c.action do |_global_options, options, _args|
      DRb.start_service
      fail '--mac option is mandatory.' unless options[:mac]
      fail '--port option is mandatory.' unless options[:port]
      fail '--slice option is mandatory.' unless options[:slice]
      port = Slice::Port.parse(options[:port])
      Trema.
        controller_process(options[:socket_dir]).
        sliceable_switch.
        add_mac_address(options[:slice], options[:mac],
                        dpid: port[:dpid], port_no: port[:port_no])
    end
  end

  desc 'Deletes a host from a slice'
  command :delete_host do |c|
    c.desc 'MAC address'
    c.flag [:m, :mac]
    c.desc 'Switch port'
    c.flag [:p, :port]
    c.desc 'Slice name'
    c.flag [:s, :slice]
    c.desc 'Location to find socket files'
    c.flag [:S, :socket_dir], default_value: Trema::DEFAULT_SOCKET_DIR

    c.action do |_global_options, options, _args|
      fail '--mac option is mandatory.' unless options[:mac]
      fail '--port option is mandatory.' unless options[:port]
      fail '--slice option is mandatory.' unless options[:slice]
      port = Slice::Port.parse(options[:port])
      Trema.
        controller_process(options[:socket_dir]).
        sliceable_switch.
        delete_mac_address(options[:slice], options[:mac],
                           dpid: port[:dpid], port_no: port[:port_no])
    end
  end

  exit run(ARGV)
end
